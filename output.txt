
======================================================================================

Contenu du fichier : config\database.js

======================================================================================
import { Sequelize } from "sequelize";

const sequelize = new Sequelize({
    dialect: 'sqlite',
    storage: './database.sqlite3',
    logging: false
})


export default sequelize;0
======================================================================================

Contenu du fichier : database.sqlite3

======================================================================================

Contenu du fichier : models\hero.model.js

======================================================================================
import sequelize from "../config/database.js";
import { DataTypes } from "sequelize";

const Hero = sequelize.define("heroes", { id: {
  type: DataTypes.UUIDV4,
  primaryKey: true,
  defaultValue: DataTypes.UUIDV4,
},
alias: {
  type: DataTypes.STRING,
  allowNull: false,
  unique: true
},
identity: {
  type: DataTypes.STRING,
  allowNull: false,
},
powerDate: {
  type: DataTypes.STRING,
  allowNull: false,
},
isDeleted: {
  type: DataTypes.BOOLEAN,
  allowNull: false,
  defaultValue: false
}}, {
  defaultScope: {
    where: {
      isDeleted: false
    }
  }, 
  scopes: {
    deleted: {
      where: {
        idDeleted: true
      }
    },
    withDeleted: {},
  }
});

export default Hero;0
======================================================================================

Contenu du fichier : repositories\hero.repository.js

======================================================================================
import Hero from "../models/hero.model.js";

export async function createHero({ alias, identity, powerDate }) {
  const hero = await Hero.create({ alias, identity, powerDate });
  return hero;
}

export async function getHeroById(id) {
  const hero = await Hero.findByPk(id);
  if (!hero) {
    return null;
  }

  return hero;
}

export async function getDeletedHeroById(id) {
  const hero = await Hero.scope("deleted").findByPk(id);
  if (!hero) {
    return null;
  }

  return hero;
}

export async function updateHero(id, values) {
  const hero = await getHeroById(id);
  if (!hero) {
    return null;
  }

  return await hero.update(values);
}

export async function deleteHero(id) {
  const hero = await getHeroById(id);
  if (!hero) {
    return null;
  }

  return await updateHero(hero.id, { isDeleted: true });
}

export async function getAllHeroes() {
  return await Hero.findAll();
}

export async function heroExists(alias) {
  const hero = await Hero.findOne({ where: { alias } });
  return Boolean(hero);
}

export async function heroDeletedExists(alias) {
  const hero = await Hero.scope("deleted").findOne({ where: { alias } });
  return Boolean(hero);
}

export async function getAllHeroesWithDeleted() {
  await Hero.scope("withDeleted").findAll();
}

export async function getAllHeroesDeleted() {
  await Hero.scope("deleted").findAll();
}

export async function restoreHero(id) {
  const deletedHero = await getDeletedHeroById(id);
  
  if (!deletedHero || (await heroExists(deletedHero.alias))) {
    return null;
  }

  return await deletedHero.update({ isDeleted: false });
}0
======================================================================================

Contenu du fichier : repositories\index.repository.js

======================================================================================
export * as HeroRepository from "./hero.repository.js"0
======================================================================================

Contenu du fichier : server.js

======================================================================================
import sequelize from "./config/database.js";
import express from "express";
import { HeroService } from "./services/index.service.js";

await sequelize.sync({ force: true });
console.log("Base de donnée synchronisée !");

const app = express();

try {
  const batman = await HeroService.createHero({
    alias: "Batman",
    identity: "Bruce Wayne",
    powerDate: "01/01/1985",
  });
  await HeroService.createHero({
    alias: "Superman",
    identity: "Clark Kent",
    powerDate: "01/01/1985",
  });

  await HeroService.deleteHero(batman.id);
  
  // await HeroService.createHero({
  //   alias: "Batman",
  //   identity: "Robin ...",
  //   powerDate: "01/01/1985",
  // });
  console.log((await HeroService.getAllHeroes()));
  
  await HeroService.restoreHero(batman.id);
  console.log((await HeroService.getAllHeroes()));  

} catch (error) {
  console.log("[ERROR]", error.message);
}

app.listen(3000, () => console.log("Server listen on http://localhost:3000"));0
======================================================================================

Contenu du fichier : services\hero.service.js

======================================================================================
import { HeroRepository } from "../repositories/index.repository.js";

// Règles métier
  // 1. Confidentialité des héros
  // 2. softDelete

export async function getHeroById(id) {
  const hero = await HeroRepository.getHeroById(id);

  if (!hero) {
    throw new Error("Le héros n'existe pas.");
  }

  return {
    id: hero.id,
    alias: hero.alias,
    powerDate: hero.powerDate.slice(-4),
  };
}

export async function createHero({ alias, identity, powerDate }) {
  if (!alias || alias.length < 3 || !/^[a-zA-Z ]+$/.test(alias)) {
    throw new Error("Alias non valide (3 caractères min, etc.)");
  }

  if (await HeroRepository.heroExists(alias)) {
    throw new Error("Le héros existe déjà (alias).");
  }

  const hero = await HeroRepository.createHero({ alias, identity, powerDate });

  return hero.dataValues;
}

export async function updateHero(id, { alias, identity, powerDate }) {
  if (!alias || alias.length < 3 || !/^[a-zA-Z ]+$/.test(alias)) {
    throw new Error("Alias non valide (3 caractères min, etc.)");
  }

  if (await HeroRepository.heroExists(alias)) {
    throw new Error("Le héros existe déjà (alias).");
  }

  const hero = await HeroRepository.updateHero(id, {
    alias,
    identity,
    powerDate,
  });

  return hero.dataValues;
}

export async function deleteHero(id) {
  if (!(await getHeroById(id))) {
    throw new Error("Le héros n'existe pas.");
  }

  return (await HeroRepository.deleteHero(id)).datavalues;
}

export async function getAllHeroes() {
  const heroes = await HeroRepository.getAllHeroes();

  const formattedHeroes = heroes.map(hero => {
    return {
      id: hero.id,
      alias: hero.alias,
      powerDate: hero.powerDate.slice(-4),
    }
  })

  return formattedHeroes;
}

export async function restoreHero(id){
  const restoredHero = await HeroRepository.restoreHero(id)

  if (!restoredHero){
    throw new Error("Le hero n'existe pas , il ne peut pas être restauré");
  }
  return restoredHero
}0
======================================================================================

Contenu du fichier : services\index.service.js

======================================================================================
export * as HeroService from "./hero.service.js"0